/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { BillingTypeEnum, billingTypeEnumSchema } from './billingTypeEnum';
import { IrisStatus, irisStatusSchema } from './irisStatus';
import { LnpCarrier, lnpCarrierSchema } from './lnpCarrier';
import { LnpError, lnpErrorSchema } from './lnpError';
import { PortInTypeEnum, portInTypeEnumSchema } from './portInTypeEnum';
import {
  PortOutStatusEnum,
  portOutStatusEnumSchema,
} from './portOutStatusEnum';
import {
  ProcessingStatus4Enum,
  processingStatus4EnumSchema,
} from './processingStatus4Enum';
import { Subscriber, subscriberSchema } from './subscriber';
import { WirelessInfo, wirelessInfoSchema } from './wirelessInfo';

export interface LnpOrderResponse {
  orderId?: string;
  processingStatus?: ProcessingStatus4Enum;
  bulkPortinOrderId?: string;
  externalId?: string;
  requestedFocDate?: string;
  earliestEstimate?: string;
  actualFocDate?: string;
  alternateSpid?: string;
  billingTelephoneNumber: string;
  newBillingTelephoneNumber: string;
  subscriber?: Subscriber;
  loaAuthorizingPerson: string;
  wirelessInfo?: WirelessInfo;
  numbersToPort: string[];
  vendorOrder?: string;
  accountId?: number;
  siteId?: number;
  peerId?: number;
  errors?: LnpError[];
  losingCarrierName?: string;
  losingCarrierSpid?: string;
  losingCarrierIsWireless?: string;
  vendorName?: string;
  orderCreateDate?: string;
  lastModifiedDate?: string;
  userId?: string;
  lastModifiedBy?: string;
  customerOrderId?: string;
  status?: IrisStatus;
  nnspid?: string;
  portOutStatus?: PortOutStatusEnum;
  partialPort?: string;
  immediately?: boolean;
  triggered?: boolean;
  billingType?: BillingTypeEnum;
  portInType?: PortInTypeEnum;
  tnAttributes?: string[];
  autoActivationType?: string;
  overrideValidation?: boolean;
  draft?: boolean;
  losingCarrierFields?: LnpCarrier;
}

export const lnpOrderResponseSchema: Schema<LnpOrderResponse> = object({
  orderId: ['orderId', optional(string()), { xmlName: 'OrderId' }],
  processingStatus: [
    'processingStatus',
    optional(processingStatus4EnumSchema),
    { xmlName: 'ProcessingStatus' },
  ],
  bulkPortinOrderId: [
    'bulkPortinOrderId',
    optional(string()),
    { xmlName: 'BulkPortinOrderId' },
  ],
  externalId: ['externalId', optional(string()), { xmlName: 'ExternalId' }],
  requestedFocDate: [
    'requestedFocDate',
    optional(string()),
    { xmlName: 'RequestedFocDate' },
  ],
  earliestEstimate: [
    'earliestEstimate',
    optional(string()),
    { xmlName: 'EarliestEstimate' },
  ],
  actualFocDate: [
    'actualFocDate',
    optional(string()),
    { xmlName: 'ActualFocDate' },
  ],
  alternateSpid: [
    'alternateSpid',
    optional(string()),
    { xmlName: 'AlternateSpid' },
  ],
  billingTelephoneNumber: [
    'billingTelephoneNumber',
    string(),
    { xmlName: 'BillingTelephoneNumber' },
  ],
  newBillingTelephoneNumber: [
    'newBillingTelephoneNumber',
    string(),
    { xmlName: 'NewBillingTelephoneNumber' },
  ],
  subscriber: [
    'subscriber',
    optional(lazy(() => subscriberSchema)),
    { xmlName: 'Subscriber' },
  ],
  loaAuthorizingPerson: [
    'loaAuthorizingPerson',
    string(),
    { xmlName: 'LoaAuthorizingPerson' },
  ],
  wirelessInfo: [
    'wirelessInfo',
    optional(lazy(() => wirelessInfoSchema)),
    { xmlName: 'WirelessInfo' },
  ],
  numbersToPort: [
    'numbersToPort',
    array(string(), { xmlItemName: 'PhoneNumber' }),
    { xmlName: 'ListOfPhoneNumbers' },
  ],
  vendorOrder: ['vendorOrder', optional(string()), { xmlName: 'PON' }],
  accountId: ['accountId', optional(number()), { xmlName: 'AccountId' }],
  siteId: ['siteId', optional(number()), { xmlName: 'SiteId' }],
  peerId: ['peerId', optional(number()), { xmlName: 'PeerId' }],
  errors: [
    'errors',
    optional(array(lazy(() => lnpErrorSchema))),
    { xmlName: 'Errors' },
  ],
  losingCarrierName: [
    'losingCarrierName',
    optional(string()),
    { xmlName: 'LosingCarrierName' },
  ],
  losingCarrierSpid: [
    'losingCarrierSpid',
    optional(string()),
    { xmlName: 'LosingCarrierSPID' },
  ],
  losingCarrierIsWireless: [
    'losingCarrierIsWireless',
    optional(string()),
    { xmlName: 'LosingCarrierIsWireless' },
  ],
  vendorName: ['vendorName', optional(string()), { xmlName: 'VendorName' }],
  orderCreateDate: [
    'orderCreateDate',
    optional(string()),
    { xmlName: 'OrderCreateDate' },
  ],
  lastModifiedDate: [
    'lastModifiedDate',
    optional(string()),
    { xmlName: 'LastModifiedDate' },
  ],
  userId: ['userId', optional(string())],
  lastModifiedBy: [
    'lastModifiedBy',
    optional(string()),
    { xmlName: 'LastModifiedBy' },
  ],
  customerOrderId: [
    'customerOrderId',
    optional(string()),
    { xmlName: 'CustomerOrderId' },
  ],
  status: [
    'status',
    optional(lazy(() => irisStatusSchema)),
    { xmlName: 'Status' },
  ],
  nnspid: ['nnspid', optional(string()), { xmlName: 'SPID' }],
  portOutStatus: [
    'portOutStatus',
    optional(portOutStatusEnumSchema),
    { xmlName: 'PortOutStatus' },
  ],
  partialPort: ['partialPort', optional(string()), { xmlName: 'PartialPort' }],
  immediately: ['immediately', optional(boolean()), { xmlName: 'Immediately' }],
  triggered: ['triggered', optional(boolean()), { xmlName: 'Triggered' }],
  billingType: [
    'billingType',
    optional(billingTypeEnumSchema),
    { xmlName: 'BillingType' },
  ],
  portInType: [
    'portInType',
    optional(portInTypeEnumSchema),
    { xmlName: 'PortType' },
  ],
  tnAttributes: [
    'tnAttributes',
    optional(array(string(), { xmlItemName: 'TnAttribute' })),
    { xmlName: 'TnAttributes' },
  ],
  autoActivationType: [
    'autoActivationType',
    optional(string()),
    { xmlName: 'AutoActivation' },
  ],
  overrideValidation: [
    'overrideValidation',
    optional(boolean()),
    { xmlName: 'OverrideValidation' },
  ],
  draft: ['draft', optional(boolean())],
  losingCarrierFields: [
    'losingCarrierFields',
    optional(lazy(() => lnpCarrierSchema)),
    { xmlName: 'Tpa' },
  ],
});
