/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  EnumParameterAllowedValue,
  enumParameterAllowedValueSchema,
} from './enumParameterAllowedValue';

export interface ReportParameter {
  name?: string;
  type?: string;
  listType?: string;
  multiSelectAllowed?: string;
  required?: boolean;
  valueFilter?: string;
  jasperId?: string;
  description?: string;
  enumParameterAllowedValues?: EnumParameterAllowedValue[];
  recommendedValue?: string;
  helpInformation?: string;
}

export const reportParameterSchema: Schema<ReportParameter> = object({
  name: ['name', optional(string()), { xmlName: 'Name' }],
  type: ['type', optional(string()), { xmlName: 'Type' }],
  listType: ['listType', optional(string()), { xmlName: 'ListType' }],
  multiSelectAllowed: [
    'multiSelectAllowed',
    optional(string()),
    { xmlName: 'MultiSelectAllowed' },
  ],
  required: ['required', optional(boolean()), { xmlName: 'Required' }],
  valueFilter: ['valueFilter', optional(string()), { xmlName: 'ValueFilter' }],
  jasperId: ['jasperId', optional(string()), { xmlName: 'JasperId' }],
  description: ['description', optional(string()), { xmlName: 'Description' }],
  enumParameterAllowedValues: [
    'enumParameterAllowedValues',
    optional(
      array(
        lazy(() => enumParameterAllowedValueSchema),
        { xmlItemName: 'Value' }
      )
    ),
    { xmlName: 'Values' },
  ],
  recommendedValue: [
    'recommendedValue',
    optional(string()),
    { xmlName: 'RecommendedValue' },
  ],
  helpInformation: [
    'helpInformation',
    optional(string()),
    { xmlName: 'HelpInformation' },
  ],
});
