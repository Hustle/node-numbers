/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { DldaTnGroup, dldaTnGroupSchema } from './dldaTnGroup';
import {
  ProcessingStatusEnum,
  processingStatusEnumSchema,
} from './processingStatusEnum';
import {
  TelephoneNumberError,
  telephoneNumberErrorSchema,
} from './telephoneNumberError';

export interface DldaOrderPayload {
  id?: string;
  accountId?: number;
  name?: string;
  lastModifiedDateInUtc?: string;
  lastModifiedBy?: string;
  createdByUser?: string;
  customerOrderId?: string;
  siteId?: number;
  peerId?: number;
  orderCreateDate?: string;
  processingStatus?: ProcessingStatusEnum;
  dldaTnGroups?: DldaTnGroup[];
  deleteDldaTnGroups?: string;
  errors?: TelephoneNumberError[];
}

export const dldaOrderPayloadSchema: Schema<DldaOrderPayload> = object({
  id: ['id', optional(string()), { xmlName: 'OrderId' }],
  accountId: ['accountId', optional(number()), { xmlName: 'AccountId' }],
  name: ['name', optional(string()), { xmlName: 'Name' }],
  lastModifiedDateInUtc: [
    'lastModifiedDateInUtc',
    optional(string()),
    { xmlName: 'LastModifiedDate' },
  ],
  lastModifiedBy: [
    'lastModifiedBy',
    optional(string()),
    { xmlName: 'LastModifiedBy' },
  ],
  createdByUser: [
    'createdByUser',
    optional(string()),
    { xmlName: 'CreatedByUser' },
  ],
  customerOrderId: [
    'customerOrderId',
    optional(string()),
    { xmlName: 'CustomerOrderId' },
  ],
  siteId: ['siteId', optional(number()), { xmlName: 'SiteId' }],
  peerId: ['peerId', optional(number()), { xmlName: 'PeerId' }],
  orderCreateDate: [
    'orderCreateDate',
    optional(string()),
    { xmlName: 'OrderCreateDate' },
  ],
  processingStatus: [
    'processingStatus',
    optional(processingStatusEnumSchema),
    { xmlName: 'ProcessingStatus' },
  ],
  dldaTnGroups: [
    'dldaTnGroups',
    optional(
      array(lazy(() => dldaTnGroupSchema), { xmlItemName: 'DldaTnGroup' })
    ),
    { xmlName: 'DldaTnGroups' },
  ],
  deleteDldaTnGroups: [
    'deleteDldaTnGroups',
    optional(string()),
    { xmlName: 'DeleteDldaTnGroups' },
  ],
  errors: [
    'errors',
    optional(
      array(lazy(() => telephoneNumberErrorSchema), { xmlItemName: 'Error' })
    ),
    { xmlName: 'ErrorList' },
  ],
});
