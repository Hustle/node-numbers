/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { boolean, number, object, optional, Schema, string } from '../schema';
import {
  ConnectionTypeDefaultEnum,
  connectionTypeDefaultEnumSchema,
} from './connectionTypeDefaultEnum';
import { DlrEnum, dlrEnumSchema } from './dlrEnum';
import { DstNpiEnum, dstNpiEnumSchema } from './dstNpiEnum';
import { DstTonEnum, dstTonEnumSchema } from './dstTonEnum';
import { SrcNpiEnum, srcNpiEnumSchema } from './srcNpiEnum';
import { SrcTonEnum, srcTonEnumSchema } from './srcTonEnum';

export interface SmppSettings {
  username?: string;
  password?: string;
  dlr?: DlrEnum;
  dlrCarrier?: boolean;
  maxPendingSubmits?: number;
  forceTon?: boolean;
  allowThirdPartyTN?: boolean;
  connectionTypeDefault?: ConnectionTypeDefaultEnum;
  maxConnections?: number;
  resetPassword?: boolean;
  srcTon?: SrcTonEnum;
  srcNpi?: SrcNpiEnum;
  dstTon?: DstTonEnum;
  dstNpi?: DstNpiEnum;
}

export const smppSettingsSchema: Schema<SmppSettings> = object({
  username: ['username', optional(string()), { xmlName: 'SmppUsername' }],
  password: ['password', optional(string()), { xmlName: 'Password' }],
  dlr: ['dlr', optional(dlrEnumSchema), { xmlName: 'Dlr' }],
  dlrCarrier: ['dlrCarrier', optional(boolean()), { xmlName: 'DlrCarrier' }],
  maxPendingSubmits: [
    'maxPendingSubmits',
    optional(number()),
    { xmlName: 'MaxPendingSubmits' },
  ],
  forceTon: ['forceTon', optional(boolean()), { xmlName: 'ForceTon' }],
  allowThirdPartyTN: [
    'allowThirdPartyTN',
    optional(boolean()),
    { xmlName: 'AllowThirdPartyTN' },
  ],
  connectionTypeDefault: [
    'connectionTypeDefault',
    optional(connectionTypeDefaultEnumSchema),
    { xmlName: 'ConnectionTypeDefault' },
  ],
  maxConnections: [
    'maxConnections',
    optional(number()),
    { xmlName: 'MaxConnections' },
  ],
  resetPassword: [
    'resetPassword',
    optional(boolean()),
    { xmlName: 'ResetPassword' },
  ],
  srcTon: ['srcTon', optional(srcTonEnumSchema), { xmlName: 'SrcTon' }],
  srcNpi: ['srcNpi', optional(srcNpiEnumSchema), { xmlName: 'SrcNpi' }],
  dstTon: ['dstTon', optional(dstTonEnumSchema), { xmlName: 'DstTon' }],
  dstNpi: ['dstNpi', optional(dstNpiEnumSchema), { xmlName: 'DstNpi' }],
});
