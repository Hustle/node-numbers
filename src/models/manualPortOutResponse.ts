/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema';
import { IrisStatus, irisStatusSchema } from './irisStatus';
import { LnpError, lnpErrorSchema } from './lnpError';
import {
  ManualPortOutRequest,
  manualPortOutRequestSchema,
} from './manualPortOutRequest';
import {
  PortOutStatus1Enum,
  portOutStatus1EnumSchema,
} from './portOutStatus1Enum';

export interface ManualPortOutResponse {
  status?: IrisStatus;
  orderId?: string;
  portOutStatus?: PortOutStatus1Enum;
  manualPortOutRequest?: ManualPortOutRequest;
  errors?: LnpError[];
}

export const manualPortOutResponseSchema: Schema<ManualPortOutResponse> = object(
  {
    status: [
      'status',
      optional(lazy(() => irisStatusSchema)),
      { xmlName: 'Status' },
    ],
    orderId: ['orderId', optional(string()), { xmlName: 'OrderId' }],
    portOutStatus: [
      'portOutStatus',
      optional(portOutStatus1EnumSchema),
      { xmlName: 'ProcessingStatus' },
    ],
    manualPortOutRequest: [
      'manualPortOutRequest',
      optional(lazy(() => manualPortOutRequestSchema)),
      { xmlName: 'PortOutRequest' },
    ],
    errors: [
      'errors',
      optional(array(lazy(() => lnpErrorSchema))),
      { xmlName: 'Errors' },
    ],
  }
);
