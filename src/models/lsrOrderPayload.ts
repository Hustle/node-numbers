/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { LsrOrderError, lsrOrderErrorSchema } from './lsrOrderError';
import { OrderStatus1Enum, orderStatus1EnumSchema } from './orderStatus1Enum';
import { Subscriber, subscriberSchema } from './subscriber';

export interface LsrOrderPayload {
  id?: string;
  accountId?: number;
  name?: string;
  lastModifiedDateInUtc?: string;
  lastModifiedBy?: string;
  createdByUser?: string;
  customerOrderId?: string;
  siteId?: number;
  peerId?: number;
  orderCreateDate?: string;
  overrideValidation?: boolean;
  authorizingPerson?: string;
  spid?: string;
  billingTelephoneNumber?: string;
  pon?: string;
  ponVersion?: number;
  partialPort?: boolean;
  requestedFocDate?: string;
  actualFocDate?: string;
  subscriber?: Subscriber;
  telephoneNumbers?: string[];
  lsrOrderErrors?: LsrOrderError[];
  countOfTNs?: number;
  orderStatus?: OrderStatus1Enum;
}

export const lsrOrderPayloadSchema: Schema<LsrOrderPayload> = object({
  id: ['id', optional(string()), { xmlName: 'OrderId' }],
  accountId: ['accountId', optional(number()), { xmlName: 'AccountId' }],
  name: ['name', optional(string()), { xmlName: 'Name' }],
  lastModifiedDateInUtc: [
    'lastModifiedDateInUtc',
    optional(string()),
    { xmlName: 'LastModifiedDate' },
  ],
  lastModifiedBy: [
    'lastModifiedBy',
    optional(string()),
    { xmlName: 'LastModifiedBy' },
  ],
  createdByUser: [
    'createdByUser',
    optional(string()),
    { xmlName: 'CreatedByUser' },
  ],
  customerOrderId: [
    'customerOrderId',
    optional(string()),
    { xmlName: 'CustomerOrderId' },
  ],
  siteId: ['siteId', optional(number()), { xmlName: 'SiteId' }],
  peerId: ['peerId', optional(number()), { xmlName: 'PeerId' }],
  orderCreateDate: [
    'orderCreateDate',
    optional(string()),
    { xmlName: 'OrderCreateDate' },
  ],
  overrideValidation: [
    'overrideValidation',
    optional(boolean()),
    { xmlName: 'OverrideValidation' },
  ],
  authorizingPerson: [
    'authorizingPerson',
    optional(string()),
    { xmlName: 'AuthorizingPerson' },
  ],
  spid: ['spid', optional(string()), { xmlName: 'SPID' }],
  billingTelephoneNumber: [
    'billingTelephoneNumber',
    optional(string()),
    { xmlName: 'BillingTelephoneNumber' },
  ],
  pon: ['pon', optional(string()), { xmlName: 'Pon' }],
  ponVersion: ['ponVersion', optional(number()), { xmlName: 'PonVersion' }],
  partialPort: ['partialPort', optional(boolean()), { xmlName: 'PartialPort' }],
  requestedFocDate: [
    'requestedFocDate',
    optional(string()),
    { xmlName: 'RequestedFocDate' },
  ],
  actualFocDate: [
    'actualFocDate',
    optional(string()),
    { xmlName: 'ActualFocDate' },
  ],
  subscriber: [
    'subscriber',
    optional(lazy(() => subscriberSchema)),
    { xmlName: 'Subscriber' },
  ],
  telephoneNumbers: [
    'telephoneNumbers',
    optional(array(string(), { xmlItemName: 'TelephoneNumber' })),
    { xmlName: 'ListOfTelephoneNumbers' },
  ],
  lsrOrderErrors: [
    'lsrOrderErrors',
    optional(
      array(
        lazy(() => lsrOrderErrorSchema),
        { xmlItemName: 'LsrSubmissionOrderError' }
      )
    ),
    { xmlName: 'LsrOrderErrors' },
  ],
  countOfTNs: ['countOfTNs', optional(number()), { xmlName: 'CountOfTNs' }],
  orderStatus: [
    'orderStatus',
    optional(orderStatus1EnumSchema),
    { xmlName: 'OrderStatus' },
  ],
});
