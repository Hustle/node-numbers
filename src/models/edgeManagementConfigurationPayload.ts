/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { array, lazy, object, optional, Schema } from '../schema';
import {
  AccessRestriction,
  accessRestrictionSchema,
} from './accessRestriction';
import {
  HttpVoiceConfigurationPayload,
  httpVoiceConfigurationPayloadSchema,
} from './httpVoiceConfigurationPayload';
import {
  SbcConfigurationPayload,
  sbcConfigurationPayloadSchema,
} from './sbcConfigurationPayload';
import {
  SipAuthConfigurationPayload,
  sipAuthConfigurationPayloadSchema,
} from './sipAuthConfigurationPayload';
import {
  WebRtcConfigurationPayload,
  webRtcConfigurationPayloadSchema,
} from './webRtcConfigurationPayload';

export interface EdgeManagementConfigurationPayload {
  sbcConfiguration?: SbcConfigurationPayload;
  sipAuthConfiguration?: SipAuthConfigurationPayload;
  accessRestrictions?: AccessRestriction[];
  httpVoiceConfiguration?: HttpVoiceConfigurationPayload;
  webRtcConfiguration?: WebRtcConfigurationPayload;
}

export const edgeManagementConfigurationPayloadSchema: Schema<EdgeManagementConfigurationPayload> = object(
  {
    sbcConfiguration: [
      'sbcConfiguration',
      optional(lazy(() => sbcConfigurationPayloadSchema)),
      { xmlName: 'SbcSettings' },
    ],
    sipAuthConfiguration: [
      'sipAuthConfiguration',
      optional(lazy(() => sipAuthConfigurationPayloadSchema)),
      { xmlName: 'SipAuthentication' },
    ],
    accessRestrictions: [
      'accessRestrictions',
      optional(
        array(
          lazy(() => accessRestrictionSchema),
          { xmlItemName: 'AccessRestriction' }
        )
      ),
      { xmlName: 'ProductSpecificAccessRestrictions' },
    ],
    httpVoiceConfiguration: [
      'httpVoiceConfiguration',
      optional(lazy(() => httpVoiceConfigurationPayloadSchema)),
      { xmlName: 'HttpVoice' },
    ],
    webRtcConfiguration: [
      'webRtcConfiguration',
      optional(lazy(() => webRtcConfigurationPayloadSchema)),
      { xmlName: 'WebRtc' },
    ],
  }
);
