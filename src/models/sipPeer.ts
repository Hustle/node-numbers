/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Address, addressSchema } from './address';
import { Hosts, hostsSchema } from './hosts';
import { ProductTypeEnum, productTypeEnumSchema } from './productTypeEnum';
import {
  SipPeerLineOptionDto,
  sipPeerLineOptionDtoSchema,
} from './sipPeerLineOptionDto';
import {
  SipPeerTerminationHosts,
  sipPeerTerminationHostsSchema,
} from './sipPeerTerminationHosts';

export interface SipPeer {
  id?: number;
  peerName?: string;
  description?: string;
  defaultPeer?: boolean;
  destinationUri?: string;
  voiceHosts?: Hosts;
  voiceHostGroups?: Hosts[];
  terminationHosts?: SipPeerTerminationHosts;
  productTypes?: ProductTypeEnum[];
  address?: Address;
  premiseTrunks?: string;
  callingName?: SipPeerLineOptionDto;
  suggestedAddresses?: Address[];
  tnCount?: number;
}

export const sipPeerSchema: Schema<SipPeer> = object({
  id: ['id', optional(number()), { xmlName: 'PeerId' }],
  peerName: ['peerName', optional(string()), { xmlName: 'PeerName' }],
  description: ['description', optional(string()), { xmlName: 'Description' }],
  defaultPeer: [
    'defaultPeer',
    optional(boolean()),
    { xmlName: 'IsDefaultPeer' },
  ],
  destinationUri: [
    'destinationUri',
    optional(string()),
    { xmlName: 'FinalDestinationUri' },
  ],
  voiceHosts: [
    'voiceHosts',
    optional(lazy(() => hostsSchema)),
    { xmlName: 'VoiceHosts' },
  ],
  voiceHostGroups: [
    'voiceHostGroups',
    optional(array(lazy(() => hostsSchema), { xmlItemName: 'Hosts' })),
    { xmlName: 'VoiceHostGroups' },
  ],
  terminationHosts: [
    'terminationHosts',
    optional(lazy(() => sipPeerTerminationHostsSchema)),
    { xmlName: 'TerminationHosts' },
  ],
  productTypes: [
    'productTypes',
    optional(array(productTypeEnumSchema, { xmlItemName: 'productTypes' })),
    { xmlName: 'Products' },
  ],
  address: [
    'address',
    optional(lazy(() => addressSchema)),
    { xmlName: 'Address' },
  ],
  premiseTrunks: [
    'premiseTrunks',
    optional(string()),
    { xmlName: 'PremiseTrunks' },
  ],
  callingName: [
    'callingName',
    optional(lazy(() => sipPeerLineOptionDtoSchema)),
    { xmlName: 'CallingName' },
  ],
  suggestedAddresses: [
    'suggestedAddresses',
    optional(array(lazy(() => addressSchema), { xmlItemName: 'Address' })),
    { xmlName: 'SuggestedAddresses' },
  ],
  tnCount: ['tnCount', optional(number()), { xmlName: 'TnCount' }],
});
