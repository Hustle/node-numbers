/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { BaseOrderType, baseOrderTypeSchema } from './baseOrderType';

export interface Order {
  id?: string;
  name?: string;
  lastModifiedBy?: string;
  customerOrderId?: string;
  siteId?: number;
  peerId?: number;
  orderCreateDate?: string;
  orderType?: BaseOrderType;
  partialAllowed?: boolean;
  backOrderRequested?: boolean;
  closeOrder?: boolean;
  tnAttributes?: string[];
}

export const orderSchema: Schema<Order> = object({
  id: ['id', optional(string())],
  name: ['name', optional(string()), { xmlName: 'Name' }],
  lastModifiedBy: [
    'lastModifiedBy',
    optional(string()),
    { xmlName: 'LastModifiedBy' },
  ],
  customerOrderId: [
    'customerOrderId',
    optional(string()),
    { xmlName: 'CustomerOrderId' },
  ],
  siteId: ['siteId', optional(number()), { xmlName: 'SiteId' }],
  peerId: ['peerId', optional(number()), { xmlName: 'PeerId' }],
  orderCreateDate: [
    'orderCreateDate',
    optional(string()),
    { xmlName: 'OrderCreateDate' },
  ],
  orderType: [
    'orderType',
    optional(lazy(() => baseOrderTypeSchema)),
    { xmlName: 'BaseOrderType' },
  ],
  partialAllowed: [
    'partialAllowed',
    optional(boolean()),
    { xmlName: 'PartialAllowed' },
  ],
  backOrderRequested: [
    'backOrderRequested',
    optional(boolean()),
    { xmlName: 'BackOrderRequested' },
  ],
  closeOrder: ['closeOrder', optional(boolean()), { xmlName: 'CloseOrder' }],
  tnAttributes: [
    'tnAttributes',
    optional(array(string(), { xmlItemName: 'TnAttribute' })),
    { xmlName: 'TnAttributes' },
  ],
});
