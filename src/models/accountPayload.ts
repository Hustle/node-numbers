/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Address, addressSchema } from './address';
import { Contact, contactSchema } from './contact';
import {
  PortCarrierTypeEnum,
  portCarrierTypeEnumSchema,
} from './portCarrierTypeEnum';

export interface AccountPayload {
  accountId?: number;
  globalAccountNumber?: string;
  associatedCatapultAccount?: string;
  companyName?: string;
  accountType?: string;
  externalId?: string;
  billingCycle?: number;
  penaltyType?: string;
  pricing?: string;
  nenaId?: string;
  tiers?: number[];
  address?: Address;
  contact?: Contact;
  altSpid?: string;
  spid?: string;
  portCarrierType?: PortCarrierTypeEnum;
  default911Provider?: string;
  maxTnsForAutomatedPort?: number;
  customerSegment?: string;
}

export const accountPayloadSchema: Schema<AccountPayload> = object({
  accountId: ['accountId', optional(number()), { xmlName: 'AccountId' }],
  globalAccountNumber: [
    'globalAccountNumber',
    optional(string()),
    { xmlName: 'GlobalAccountNumber' },
  ],
  associatedCatapultAccount: [
    'associatedCatapultAccount',
    optional(string()),
    { xmlName: 'AssociatedCatapultAccount' },
  ],
  companyName: ['companyName', optional(string()), { xmlName: 'CompanyName' }],
  accountType: ['accountType', optional(string()), { xmlName: 'AccountType' }],
  externalId: ['externalId', optional(string()), { xmlName: 'ExternalId' }],
  billingCycle: [
    'billingCycle',
    optional(number()),
    { xmlName: 'BillingCycle' },
  ],
  penaltyType: ['penaltyType', optional(string()), { xmlName: 'PenaltyType' }],
  pricing: ['pricing', optional(string()), { xmlName: 'Pricing' }],
  nenaId: ['nenaId', optional(string()), { xmlName: 'NenaId' }],
  tiers: [
    'tiers',
    optional(array(number(), { xmlItemName: 'Tier' })),
    { xmlName: 'Tiers' },
  ],
  address: [
    'address',
    optional(lazy(() => addressSchema)),
    { xmlName: 'Address' },
  ],
  contact: [
    'contact',
    optional(lazy(() => contactSchema)),
    { xmlName: 'Contact' },
  ],
  altSpid: ['altSpid', optional(string()), { xmlName: 'AltSpid' }],
  spid: ['spid', optional(string()), { xmlName: 'SPID' }],
  portCarrierType: [
    'portCarrierType',
    optional(portCarrierTypeEnumSchema),
    { xmlName: 'PortCarrierType' },
  ],
  default911Provider: [
    'default911Provider',
    optional(string()),
    { xmlName: 'Default911Provider' },
  ],
  maxTnsForAutomatedPort: [
    'maxTnsForAutomatedPort',
    optional(number()),
    { xmlName: 'MaxTnsForAutomatedPort' },
  ],
  customerSegment: [
    'customerSegment',
    optional(string()),
    { xmlName: 'CustomerSegment' },
  ],
});
