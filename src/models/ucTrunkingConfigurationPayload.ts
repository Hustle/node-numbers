/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  UcTrunkingAllocationRule,
  ucTrunkingAllocationRuleSchema,
} from './ucTrunkingAllocationRule';

export interface UcTrunkingConfigurationPayload {
  partnerType?: string;
  maxUcTrunks?: number;
  billingType?: string;
  customerTraffic?: string;
  usageCategory?: string;
  trunkAllocationRules?: UcTrunkingAllocationRule[];
  mainUCloudHost?: string;
}

export const ucTrunkingConfigurationPayloadSchema: Schema<UcTrunkingConfigurationPayload> = object(
  {
    partnerType: [
      'partnerType',
      optional(string()),
      { xmlName: 'PartnerType' },
    ],
    maxUcTrunks: [
      'maxUcTrunks',
      optional(number()),
      { xmlName: 'MaxUcTrunks' },
    ],
    billingType: [
      'billingType',
      optional(string()),
      { xmlName: 'BillingType' },
    ],
    customerTraffic: [
      'customerTraffic',
      optional(string()),
      { xmlName: 'CustomerTrafficAllowed' },
    ],
    usageCategory: [
      'usageCategory',
      optional(string()),
      { xmlName: 'UsageCategory' },
    ],
    trunkAllocationRules: [
      'trunkAllocationRules',
      optional(
        array(
          lazy(() => ucTrunkingAllocationRuleSchema),
          { xmlItemName: 'TrunkAllocationRule' }
        )
      ),
      { xmlName: 'TrunkAllocationRules' },
    ],
    mainUCloudHost: [
      'mainUCloudHost',
      optional(string()),
      { xmlName: 'MainCloudHost' },
    ],
  }
);
