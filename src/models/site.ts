/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { lazy, number, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import { SipPeers, sipPeersSchema } from './sipPeers';
import {
  SiteUcTrunkingConfigurationPayload,
  siteUcTrunkingConfigurationPayloadSchema,
} from './siteUcTrunkingConfigurationPayload';

export interface Site {
  id?: number;
  name?: string;
  description?: string;
  customerProvidedId?: string;
  customerName?: string;
  address?: Address;
  siteUcTrunkingConfiguration?: SiteUcTrunkingConfigurationPayload;
  sipPeers?: SipPeers;
  totalTnCount?: number;
  sipPeerCount?: number;
}

export const siteSchema: Schema<Site> = object({
  id: ['id', optional(number()), { xmlName: 'Id' }],
  name: ['name', optional(string()), { xmlName: 'Name' }],
  description: ['description', optional(string()), { xmlName: 'Description' }],
  customerProvidedId: [
    'customerProvidedId',
    optional(string()),
    { xmlName: 'CustomerProvidedId' },
  ],
  customerName: [
    'customerName',
    optional(string()),
    { xmlName: 'CustomerName' },
  ],
  address: [
    'address',
    optional(lazy(() => addressSchema)),
    { xmlName: 'Address' },
  ],
  siteUcTrunkingConfiguration: [
    'siteUcTrunkingConfiguration',
    optional(lazy(() => siteUcTrunkingConfigurationPayloadSchema)),
    { xmlName: 'UcTrunkingConfiguration' },
  ],
  sipPeers: [
    'sipPeers',
    optional(lazy(() => sipPeersSchema)),
    { xmlName: 'SipPeers' },
  ],
  totalTnCount: [
    'totalTnCount',
    optional(number()),
    { xmlName: 'TotalTnCount' },
  ],
  sipPeerCount: [
    'sipPeerCount',
    optional(number()),
    { xmlName: 'SipPeerCount' },
  ],
});
