/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { array, lazy, object, optional, Schema } from '../schema';
import { IrisStatus, irisStatusSchema } from './irisStatus';
import {
  ResultItemForAvailableNpaNxx,
  resultItemForAvailableNpaNxxSchema,
} from './resultItemForAvailableNpaNxx';
import { SearchError, searchErrorSchema } from './searchError';

export interface SearchResultForAvailableNpaNxx {
  searchError?: SearchError;
  resultSet?: ResultItemForAvailableNpaNxx[];
  status?: IrisStatus;
}

export const searchResultForAvailableNpaNxxSchema: Schema<SearchResultForAvailableNpaNxx> = object(
  {
    searchError: [
      'searchError',
      optional(lazy(() => searchErrorSchema)),
      { xmlName: 'Error' },
    ],
    resultSet: [
      'resultSet',
      optional(
        array(
          lazy(() => resultItemForAvailableNpaNxxSchema),
          { xmlItemName: 'ResultItemForAvailableNpaNxx' }
        )
      ),
      { xmlName: 'AvailableNpaNxxList' },
    ],
    status: [
      'status',
      optional(lazy(() => irisStatusSchema)),
      { xmlName: 'Status' },
    ],
  }
);
