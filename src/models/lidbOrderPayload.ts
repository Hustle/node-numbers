/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  LidbDetailTnGroup,
  lidbDetailTnGroupSchema,
} from './lidbDetailTnGroup';
import { LidbOrderError, lidbOrderErrorSchema } from './lidbOrderError';
import {
  ProcessingStatus5Enum,
  processingStatus5EnumSchema,
} from './processingStatus5Enum';

export interface LidbOrderPayload {
  id?: string;
  accountId?: number;
  name?: string;
  lastModifiedDateInUtc?: string;
  lastModifiedBy?: string;
  createdByUser?: string;
  customerOrderId?: string;
  siteId?: number;
  peerId?: number;
  orderCreateDate?: string;
  processingStatus?: ProcessingStatus5Enum;
  lidbDetailTnGroups?: LidbDetailTnGroup[];
  errors?: LidbOrderError[];
}

export const lidbOrderPayloadSchema: Schema<LidbOrderPayload> = object({
  id: ['id', optional(string()), { xmlName: 'OrderId' }],
  accountId: ['accountId', optional(number()), { xmlName: 'AccountId' }],
  name: ['name', optional(string()), { xmlName: 'Name' }],
  lastModifiedDateInUtc: [
    'lastModifiedDateInUtc',
    optional(string()),
    { xmlName: 'LastModifiedDate' },
  ],
  lastModifiedBy: [
    'lastModifiedBy',
    optional(string()),
    { xmlName: 'LastModifiedBy' },
  ],
  createdByUser: [
    'createdByUser',
    optional(string()),
    { xmlName: 'CreatedByUser' },
  ],
  customerOrderId: [
    'customerOrderId',
    optional(string()),
    { xmlName: 'CustomerOrderId' },
  ],
  siteId: ['siteId', optional(number()), { xmlName: 'SiteId' }],
  peerId: ['peerId', optional(number()), { xmlName: 'PeerId' }],
  orderCreateDate: [
    'orderCreateDate',
    optional(string()),
    { xmlName: 'OrderCreateDate' },
  ],
  processingStatus: [
    'processingStatus',
    optional(processingStatus5EnumSchema),
    { xmlName: 'ProcessingStatus' },
  ],
  lidbDetailTnGroups: [
    'lidbDetailTnGroups',
    optional(
      array(lazy(() => lidbDetailTnGroupSchema), { xmlItemName: 'LidbTnGroup' })
    ),
    { xmlName: 'LidbTnGroups' },
  ],
  errors: [
    'errors',
    optional(array(lazy(() => lidbOrderErrorSchema), { xmlItemName: 'Error' })),
    { xmlName: 'ErrorList' },
  ],
});
