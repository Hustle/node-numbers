/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Address, addressSchema } from './address';
import { DldaListingName, dldaListingNameSchema } from './dldaListingName';
import { ListingTypeEnum, listingTypeEnumSchema } from './listingTypeEnum';
import {
  SubscriberTypeEnum,
  subscriberTypeEnumSchema,
} from './subscriberTypeEnum';

export interface DldaTnGroup {
  groupNumbers?: string[];
  subscriberType: SubscriberTypeEnum;
  listingType: ListingTypeEnum;
  listingName?: DldaListingName;
  listAddress: boolean;
  address?: Address;
}

export const dldaTnGroupSchema: Schema<DldaTnGroup> = object({
  groupNumbers: [
    'groupNumbers',
    optional(array(string(), { xmlItemName: 'TelephoneNumber' })),
    { xmlName: 'TelephoneNumbers' },
  ],
  subscriberType: [
    'subscriberType',
    subscriberTypeEnumSchema,
    { xmlName: 'SubscriberType' },
  ],
  listingType: [
    'listingType',
    listingTypeEnumSchema,
    { xmlName: 'ListingType' },
  ],
  listingName: [
    'listingName',
    optional(lazy(() => dldaListingNameSchema)),
    { xmlName: 'ListingName' },
  ],
  listAddress: ['listAddress', boolean(), { xmlName: 'ListAddress' }],
  address: [
    'address',
    optional(lazy(() => addressSchema)),
    { xmlName: 'Address' },
  ],
});
